Clonar un repositorio y crear el acceso remoto:
    2- git clone [url del repositorio]
    3- cd [tab para ingresar a la carpeta] ya cuando nos encontremos dentro nos mostrara la rama en la que estamos 


Crear un pull request = enviar una actualizaci√≥n a repositorio original
    1- cd [carpeta contendedora]
    2- cd [nombre del repositorio]
    3- git status 				‚Üê üëÄ Ver qu√© cambi√≥ (antes de todo)
    4- git add .				‚Üê üì¶ Agregar los archivos modificados
    5- git commit -m "[nombre del commit]"	‚Üê üí¨ Registrar los cambios
    6- git push origin [rama]			‚Üê üöÄ Subir al repositorio remoto
    7- realizar pull request en GitHub
        6.1- [Repositorio original] [rama] <- [Repositorio secundario] [rama]
        6.2- Crear pull request

--üòâ
*--------------------------------------------------

git clone
cd  
git pull origin main // esta es una opcion adicional 
git checkout "nombre de la rama" //este comando es para pasarse a la rama que queremos
git pull origin main // ya con esto ya nos pasamos a nuestra rama 


----------------------------------------------------------------------------

compilacion de programa 
*carpeta COMPONENTES
	-CONSULTAS
	-REPORTEADOR
	-SEGURIDAD // despues de comentar y compilar pasamos al 
	-NAVEGADOR

*carpeta MODULOS / Menus
	-interfac_V3 // aqui comentamos los modulos por un momento //luego nos regresamos a seguridad y presionamos control z esto para descomentar lo que comentamos, luego agregamos la referencia en capa vista de v3

compilamos los MODULOS
	-BANCOS
	-COMERCIAL (COMPRAVENTA) //aqui genera unos errores solo compilamos y lo cerramos
	-CONTABILIDAD //se generan errores pero igual que el anterior solo compilamos y cerramos 
	-CUENTAS CORRIENTES //se generan errores pero igual que el anterior solo compilamos y cerramos
	-LOGISTICA 
	-NOMINAS
	-PRODUCCION 

//luego de compilar todo en interfac_V3, presionamos control z para descomentar todo lo que comentamos luego compilamos // si, se sigue generando errores solo comntamos esto por referencias individuales de cada grupo y compilamos 
// en seguridad se debe de compilar para que reconosca el interfac_v3


contrase√±a HO0aGo4nM94=

---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------

git 
git clone
cd + tab (para acceder al main)
git pull origin main (Actualizar el repositorio)
git checkout (aqui va el nombre de la rama) (este comando es para acceder ala rama)

-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
1. Listar ramas existentes
--------------------------
git branch  (Muestra todas las ramas locales del repositorio.)

---------------------------------------------------
2. Crear una nueva rama
-----------------------
git branch nombre_rama (Crea una nueva rama, pero no cambia a ella autom√°ticamente.)

------------------------------------------------------------------------------------------------

3. Emininar ua rama
--------------------
git branch -d nombre_rama

-----------------------------------------------------

4.Renombrar una rama
---------------------
git branch -m nuevo_nombre (Si est√°s en la rama que quieres renombrar)

-----------------------------------------------------------------------------------

git status

(Esto mostrar√° un resumen del estado del repositorio, 
 indicando qu√© archivos han cambiado, cu√°les est√°n listos
 para ser confirmados y si hay archivos sin seguimiento.)



-------------------------------------------------------------------------------------------------------------------------
bash
Copiar
Editar
-------------------------------------------------------------------------------------------------------------------------
MODULOS...
contabilidad 
nominas
comecioal
logistica

--------------------------------------------------------------------------

Base de datos:
  1. LDD
  2. LMD

----------------------------------------------------------------------------------------------------------------------------------------

* Si quieres conservar tus cambios y luego hacer pull (Guarda temporalmente los cambios sin comprometerlos en el historial de Git:)
         git stash

Luego intenta de nuevo el git pull:
        git pull origin main

Despu√©s, recupera los cambios guardados:
        git stash pop

* Si quieres descartar tus cambios locales y actualizar directamente (Advertencia: Esto eliminar√° cualquier modificaci√≥n local no guardada.)
        git reset --hard HEAD
        git pull origin main

------------------------------------------------------------------------------------------------------------------------------------------------------------------

No tendr√°s ning√∫n problema si decides no recuperar los cambios guardados con git stash pop.
Cuando haces git stash, Git guarda tus cambios en una "pila" temporal y limpia tu √°rea de trabajo. Si despu√©s decides que ya no los necesitas, simplemente puedes ignorarlos.
Si quieres asegurarte de que los cambios guardados no ocupen espacio innecesario, puedes eliminar el stash con:
              
                   git stash drop

O si hiciste varios stash y quieres limpiar todos, usa:

                   git stash clear

Entonces, si solo haces git stash y luego git pull origin main sin recuperarlos, no habr√° problema. üöÄ

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

üü°üü¢‚≠êüåü git pull origin main 
(se utiliza para actualizar tu rama local con los √∫ltimos cambios realizados en la rama main del repositorio remoto llamado origin)


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

üü°üü¢‚≠êüåü COMANDO PARA VER EL LOG 
SOLO SE CAMBIA EL CORREO, LO ULTIMO ES COMO QUEREMOS QUE SE GUARDE LA INFORMACION EN ESTE CASO ES bitavora.txt
git log --author="mcrisostomoa@miumg.edu.gt" > bitacora.txt

EN CASO QUISIERAMOS VER LOS LOGs DE TODOS SOLO SE COLOCA 
 git log

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
‚úÖ OBJETIVO: Volver al commit anterior y quedarte ah√≠ para arreglar main.
PASOS CLAROS:

üîçCOMANDO PARA VER EL HISTORIAL DE "COMMITS"
(Esto ayuda a encontrar el commit bueno)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
git log --oneline

üîôVOLVER AL COMMIT ANTERIOR Y QUEDARTE AH√ç
	git checkout 7a6b5c4
	git checkout "aqui se ingresa el codigo del commit"

üí• OPCI√ìN 2: REEMPLAZAR MAIN POR ESE COMMIT (CON RESET)
Si est√°s 100% seguro de que quieres que main regrese permanentemente a ese estado:
	git checkout main
	git reset --hard 7a6b5c4

Esto borra todos los commits hechos despu√©s de ese punto.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	git push origin main --force

‚ö†Ô∏è Cuidado: Forzar el push puede afectar a otros si est√°s en equipo.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è 

üí° ¬øPor qu√© esto funciona?
	Usar git revert:

	No borra commits (como har√≠a un reset --hard)
	Genera un nuevo commit que invierte los cambios da√±inos
	Es compatible con el flujo de trabajo colaborativo (nadie se rompe el repositorio al hacer pull)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

‚úîÔ∏è Resumen de lo que debes hacer (ejemplo paso a paso)
Supongamos que:

	El commit que rompi√≥ el main es: a1b2c3d
	El √∫ltimo commit bueno es: 7f8g9h0

1. Abre Git Bash
2. Revisa el historial:

"COMANDO"
	   git log --oneline

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Reviertes lo malo (ejemplo para varios commits):

	git revert --no-commit 7f8g9h0..HEAD
	git commit -m "Revertimos cambios que da√±aban el main"

Si fue solo un commit el que lo arruin√≥:
"COMANDO"
	  git revert a1b2c3d

4. Sube la reparaci√≥n:
"COMANDO"
	   git push origin main
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
üîß ¬øQu√© deben hacer tus compa√±eros?
Solo esto:

"COMANDO"
	   git pull origin main
Y tendr√°n la versi√≥n funcional del proyecto, sin errores de historial ni ramas en conflicto.


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
El comando git log --oneline sirve para ver un resumen del historial de commits de tu repositorio, de forma compacta y f√°cil de leer.

üß† ¬øQu√© muestra?
Cada l√≠nea representa un commit, e incluye:

	‚úÖ El ID corto del commit (hash)
	üìù El mensaje del commit

üìå Ejemplo de salida:
	a1b2c3d Corrige error en el login
	7f8g9h0 A√±ade autenticaci√≥n de usuarios
	1234567 Estructura inicial del proyecto

As√≠ puedes:
	Saber qu√© commits hay y en qu√© orden
	Copiar el ID del commit que necesitas para:
		Hacer checkout a ese punto
		Revertir cambios
		Ver diferencias (git diff)
		O incluso eliminar/revertir errores sin romper el proyecto


üõ†Ô∏è ¬øCu√°ndo usarlo?
	Cuando necesitas identificar el commit exacto donde todo funcionaba bien.
	Antes de hacer un git revert, git reset, o git checkout.
	Para entender r√°pidamente el flujo del trabajo en la rama actual.


üìé Tip adicional
	Puedes ver solo los √∫ltimos 5 commits:
"COMANDO"
git log --oneline -n 5

Y puedes combinarlo con nombres de ramas o archivos:

"COMANDO"
	git log --oneline main
	git log --oneline index.js

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



























